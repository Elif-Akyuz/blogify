name: Blogify CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (main or develop)'
        required: true
        default: 'main'

jobs:
  lint:
    name: Run Flake8 Linter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: |
          flake8 app tests

  test:
    name: Run Tests with Coverage and Report
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html pytest-cov

      - name: Run tests with coverage and generate report
        run: |
          pytest --cov=app --cov-report=term-missing --html=report.html

      - name: Upload HTML Test Report
        uses: actions/upload-artifact@v3
        with:
          name: pytest-report
          path: report.html

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.branch == 'main' || github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://blogify-prod.onrender.com' || 'https://blogify-staging.onrender.com' }}
    steps:
      - name: Set Branch Variable
        id: vars
        run: echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Validate Deployment Hooks
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          if [[ "$BRANCH" == "main" && -z "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}" ]]; then
            echo "Missing production hook"; exit 1
          elif [[ "$BRANCH" == "develop" && -z "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}" ]]; then
            echo "Missing staging hook"; exit 1
          fi

      - name: Deploying...
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "Deploying to PRODUCTION"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "Deploying to STAGING"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          fi

          echo "Waiting for service to warm up..."
          sleep 40

  healthcheck:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set Branch Variable
        id: vars
        run: echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Check Service Health
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          if [[ "$BRANCH" == "main" ]]; then
            URL="https://blogify-prod.onrender.com/health"
          elif [[ "$BRANCH" == "develop" ]]; then
            URL="https://blogify-staging.onrender.com/health"
          else
            echo "No healthcheck URL for branch: $BRANCH"; exit 1
          fi

          echo "Waiting for service to warm up..."
          sleep 40

          echo "Checking service at $URL..."
          code=$(curl --write-out '%{http_code}' --silent --output /dev/null $URL)

          if [[ "$code" == "200" ]]; then
            echo "Service is healthy ✅"
          else
            echo "Service healthcheck failed ❌"
            exit 1
          fi
