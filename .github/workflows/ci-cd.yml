name: Blogify CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (main or develop)'
        required: true
        default: 'main'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Tests
        run: pytest

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - id: vars
        run: echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Validate Deployment Hook
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          [[ "$BRANCH" == "main" && -z "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}" ]] && { echo "Missing production hook"; exit 1; }
          [[ "$BRANCH" == "develop" && -z "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}" ]] && { echo "Missing staging hook"; exit 1; }

      - name: Deploying...
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          if [[ "$BRANCH" == "main" ]]; then
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          else
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          fi

  healthcheck:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      healthy: ${{ steps.check.outputs.healthy }}
    steps:
      - id: vars
        run: echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - id: check
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          URL="https://blogify-${BRANCH == 'main' && 'prod' || 'staging'}.onrender.com/health"

          echo "Waiting for service..."
          sleep 40

          STATUS=$(curl --write-out '%{http_code}' --silent --output /dev/null $URL)
          echo "HTTP status: $STATUS"

          if [[ "$STATUS" == "200" ]]; then
            echo "healthy=true" >> $GITHUB_OUTPUT
            echo "✅ Healthy"
          else
            echo "healthy=false" >> $GITHUB_OUTPUT
            echo "❌ Healthcheck failed"
            exit 1
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: healthcheck
    if: needs.healthcheck.outputs.healthy == 'false'
    outputs:
      rolled_back: ${{ steps.revert.outputs.rolled_back }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: revert
        run: |
          echo "Rolling back last commit..."
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Optional: Reset to a known good commit from a file
          if [[ -f .last-good-commit ]]; then
            COMMIT=$(cat .last-good-commit)
            echo "Resetting to known good commit: $COMMIT"
            git reset --hard "$COMMIT"
          else
            echo "No known good commit found. Reverting last commit."
            git revert --no-edit HEAD
          fi

          git push origin HEAD:${GITHUB_REF#refs/heads/}
          echo "rolled_back=true" >> $GITHUB_OUTPUT

  redeploy:
    name: Re-Deploy After Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: needs.rollback.outputs.rolled_back == 'true'
    steps:
      - id: vars
        run: echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Re-deploying...
        run: |
          BRANCH="${{ steps.vars.outputs.branch }}"
          if [[ "$BRANCH" == "main" ]]; then
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          elif [[ "$BRANCH" == "develop" ]]; then
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          else
            echo "Unknown branch: $BRANCH"
          fi
