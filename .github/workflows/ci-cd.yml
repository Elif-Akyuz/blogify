name: Blogify CI/CD Pipeline

on:
  push:
    branches:
      - main      # Production
      - develop   # Staging
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:   # Manuel tetikleme

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
                    
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Tests
        run: pytest

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Deploying...
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Deploying to PRODUCTION"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Deploying to STAGING"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          else
            echo "Not a deployment branch."

  healthcheck:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy
    continue-on-error: true
    outputs:
      healthy: ${{ steps.check.outputs.healthy }}
    steps:
      - name: Check Service Health
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            URL="https://blogify-prod.onrender.com/health"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            URL="https://blogify-staging.onrender.com/health"
          else
            echo "No healthcheck URL"; exit 1
          fi

          echo "Checking $URL"
          code=$(curl --write-out '%{http_code}' --silent --output /dev/null $URL)

          if [[ "$code" == "200" ]]; then
            echo "healthy=true" >> $GITHUB_OUTPUT
            echo "Service is healthy ✅"
          else
            echo "healthy=false" >> $GITHUB_OUTPUT
            echo "Service healthcheck failed ❌"
            exit 1

  rollback:
    name: Rollback Last Commit
    runs-on: ubuntu-latest
    needs: healthcheck
    if: needs.healthcheck.outputs.healthy == 'false'
    outputs:
      rolled_back: ${{ steps.revert.outputs.rolled_back }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Revert Last Commit
        id: revert
        run: |
          echo "Rolling back last commit..."
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git revert --no-edit HEAD || echo "No commit to revert"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

          echo "rolled_back=true" >> $GITHUB_OUTPUT

  redeploy:
    name: Re-Deploy After Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: needs.rollback.outputs.rolled_back == 'true'
    steps:
      - name: Re-deploying After Rollback
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Re-deploying to PRODUCTION after rollback"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Re-deploying to STAGING after rollback"
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          else
            echo "No redeploy target."
